{{ 'first.css' | asset_url | stylesheet_tag }}

<div class="face-analysis-container">
  <div class="face-analysis-card">
    <div class="face-analysis-header">
      <h2 class="face-analysis-title">{{ block.settings.title }}</h2>
      <p class="face-analysis-description">{{ block.settings.description }}</p>
    </div>

    <div class="face-analysis-body">
      <!-- Image preview -->
      <div class="face-analysis-preview">
        <!-- Replaced placeholder image with face SVG -->
        <div class="preview-placeholder" id="preview-placeholder">
          <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="face-icon">
            <circle cx="12" cy="12" r="10"/>
            <circle cx="8" cy="10" r="1"/>
            <circle cx="16" cy="10" r="1"/>
            <path d="M8 16s1.5 2 4 2 4-2 4-2"/>
          </svg>
          <p>Upload or capture an image</p>
        </div>
        <img 
          id="preview-image"
          src="/placeholder.svg" 
          alt="Uploaded Image Preview" 
          width="256"
          height="256" 
          class="preview-image"
          style="display: none;"
        />
      </div>

      <!-- Added webcam section -->
      <div id="webcam-section" class="webcam-section" style="display:none;">
        <video id="webcam-video" width="256" height="256" autoplay playsinline></video>
        <canvas id="webcam-canvas" width="256" height="256" style="display:none;"></canvas>
      </div>

      <!-- Upload -->
      <div class="upload-section">
        <input id="picture" type="file" class="hidden-file" accept="image/png, image/jpeg" />
        <button type="button" class="upload-button" onclick="document.getElementById('picture').click()">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-upload">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
            <polyline points="17 8 12 3 7 8"/>
            <line x1="12" x2="12" y1="3" y2="15"/>
          </svg>
          Upload Image
        </button>
        <!-- Added webcam buttons -->
        <button type="button" class="webcam-button" id="webcam-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linejoin="round">
            <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"/>
            <circle cx="12" cy="13" r="4"/>
          </svg>
          Use Camera
        </button>
        <button type="button" class="capture-button" id="capture-btn" style="display:none;">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"/>
            <circle cx="12" cy="12" r="3"/>
          </svg>
          Capture Photo
        </button>
        <button type="button" class="stop-camera-button" id="stop-camera-btn" style="display:none;">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          </svg>
          Stop Camera
        </button>

        <!-- Added GDPR consent checkbox -->
        <div class="gdpr-consent-section">
          <div class="consent-checkbox">
            <input type="checkbox" id="consent" required>
            <label for="consent">I agree to the processing of my photo for temporary analysis to receive beauty tips and product recommendations. I understand that my photo will not be stored.</label>
          </div>
          <p class="privacy-policy-link">Read our <a href="https://beautyai.duckdns.org/privacy-policy/" target="_blank">Privacy Policy</a> for more details.</p>
        </div>

        <!-- Moved analyze button up to be with other buttons -->
        <button class="analyze-button" disabled id="analyze-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M9 12l2 2 4-4"/>
            <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1"/>
          </svg>
          <span class="button-text">Analyze Face</span>
        </button>
        <p class="upload-note">PNG, JPG, or JPEG up to 10MB</p>
      </div>

      <!-- Added loading section -->
      <div id="loading-section" class="loading-section" style="display:none;">
        <div class="loading-content">
          <div class="loading-spinner">
            <div class="spinner-ring"></div>
            <div class="spinner-ring"></div>
            <div class="spinner-ring"></div>
          </div>
          <div class="loading-text">
            <h3>Analyzing Your Face</h3>
            <p>Please wait while we process your image...</p>
          </div>
        </div>
      </div>

      <!-- Enhanced results section -->
      <div id="results-section" class="results-section" style="display:none;">
        <div class="results-header">
          <div class="results-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M9 12l2 2 4-4"/>
              <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1"/>
            </svg>
          </div>
          <h2>Analysis Complete</h2>
          <p>Here are your personalized skin analysis results</p>
        </div>

        <div class="analysis-results">
          <div class="face-display">
            <div class="face-frame">
              <img id="analyzed-face" src="/placeholder.svg" alt="Analyzed Face" width="80" height="80">
              <div class="face-badge">
                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 12l2 2 4-4"/>
                </svg>
              </div>
            </div>
            <div class="face-info">
              <h3 id="face-status">Face Detected Successfully</h3>
              <p id="analysis-summary">Analysis completed with high confidence</p>
            </div>
          </div>

          <!-- Enhanced result cards -->
          <div class="result-cards">
            <div class="result-card" id="skin-type-card">
              <div class="card-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"/>
                  <circle cx="12" cy="12" r="3"/>
                </svg>
              </div>
              <div class="card-content">
                <h4>Skin Type</h4>
                <p id="skin-type-value">-</p>
                <div class="probability-bars" id="skin-probabilities">
                  <!-- Probability bars will be added here -->
                </div>
              </div>
            </div>

            <div class="result-card" id="eye-colors-card">
              <div class="card-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="3"/>
                  <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"/>
                </svg>
              </div>
              <div class="card-content">
                <h4>Eye Colors</h4>
                <div class="eye-colors">
                  <div class="eye-color">
                    <span class="eye-label">Left:</span>
                    <span id="left-eye-color" class="eye-value">-</span>
                  </div>
                  <div class="eye-color">
                    <span class="eye-label">Right:</span>
                    <span id="right-eye-color" class="eye-value">-</span>
                  </div>
                </div>
              </div>
            </div>

            <div class="result-card" id="acne-card">
              <div class="card-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
                </svg>
              </div>
              <div class="card-content">
                <h4>Acne Analysis</h4>
                <div class="acne-info">
                  <div class="acne-level">
                    <span>Level:</span>
                    <span id="acne-level" class="acne-value">-</span>
                  </div>
                  <div class="confidence-meter">
                    <div class="confidence-bar">
                      <div id="acne-confidence-fill" class="confidence-fill"></div>
                    </div>
                    <span id="acne-confidence" class="confidence-text">-</span>
                  </div>
                </div>
              </div>
            </div>

            <div class="result-card" id="detections-card">
              <div class="card-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 12l2 2 4-4"/>
                  <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1"/>
                </svg>
              </div>
              <div class="card-content">
                <h4>Detected Issues</h4>
                <div id="detected-issues" class="detected-issues">
                  <!-- Issues will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Tips Section -->
      <div id="tips-section" class="tips-section" style="display:none;">
        <div class="tips-header">
          <div class="tips-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="5"/>
              <line x1="12" x2="12" y1="1" y2="3"/>
              <line x1="12" x2="12" y1="21" y2="23"/>
              <line x1="4.22" x2="5.64" y1="4.22" y2="5.64"/>
              <line x1="18.36" x2="19.78" y1="18.36" y2="18.36"/>
              <line x1="1" x2="3" y1="12" y2="12"/>
              <line x1="21" x2="23" y1="12" y2="12"/>
              <line x1="4.22" x2="5.64" y1="19.78" y2="18.36"/>
              <line x1="18.36" x2="19.78" y1="5.64" y2="4.22"/>
            </svg>
          </div>
          <h3>Personalized Tips</h3>
          <p>Skincare recommendations based on your analysis</p>
        </div>
        <div id="tips-content" class="tips-content">
          <!-- Tips will be populated here -->
        </div>
      </div>

      <!-- Analysis Images Section -->
      <div id="analysis-images" class="analysis-images-section" style="display:none;">
        <div class="images-header">
          <h3>Detailed Analysis</h3>
          <p>Visual breakdown of detected areas and skin conditions</p>
        </div>
        
        <div class="analysis-images-grid">
          <!-- YOLO Detection Image -->
          <div class="analysis-image-card">
            <div class="image-header">
              <div class="image-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M9 12l2 2 4-4"/>
                  <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1"/>
                </svg>
              </div>
              <div class="image-title">
                <h4>Issue Detection</h4>
                <p>Areas of concern highlighted</p>
              </div>
            </div>
            <div class="image-container">
              <img id="yolo-annotated-image" src="/placeholder.svg" alt="YOLO Detection Results" width="300" height="300" style="display: none;" />
            </div>
          </div>

          <!-- Segmentation Image -->
          <div class="analysis-image-card">
            <div class="image-header">
              <div class="image-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="3"/>
                  <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"/>
                </svg>
              </div>
              <div class="image-title">
                <h4>Skin Segmentation</h4>
                <p>Different skin areas mapped</p>
              </div>
            </div>
            <div class="image-container">
              <img id="segmentation-overlay-image" src="/placeholder.svg" alt="Segmentation Analysis" width="300" height="300" style="display: none;" />
            </div>
          </div>
        </div>
      </div>

      <!-- Product Recommendations Section -->
      <div id="product-recommendations" class="product-recommendations-section" style="display:none;">
        <div class="recommendations-header">
          <div class="recommendations-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="8" cy="21" r="1"/>
              <circle cx="19" cy="21" r="1"/>
              <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57L20.42 9H5.12"/>
            </svg>
          </div>
          <h3>Recommended Products</h3>
          <p>Curated skincare products based on your analysis</p>
        </div>
        
        <div class="recommendations-filters">
          <span class="filter-label">Filtering by:</span>
          <div id="active-filters" class="active-filters"></div>
        </div>
        
        <div id="recommended-products" class="product-grid">
          {% paginate collections.all.products by 20 %}
            {% for product in collections.all.products %}
              <div class="product-item" 
                   data-tags="{{ product.tags | join: ',' | downcase }}"
                   data-title="{{ product.title | downcase }}"
                   style="display: none;">
                <div class="product-image">
                  <img src="{{ product.featured_image | img_url: '200x200' }}" 
                       alt="{{ product.title }}" 
                       width="200" 
                       height="200">
                </div>
                <div class="product-info">
                  <h4 class="product-title">{{ product.title }}</h4>
                  <p class="product-price">{{ product.price | money }}</p>
                  <div class="product-tags">
                    {% for tag in product.tags limit: 3 %}
                      <span class="tag">{{ tag }}</span>
                    {% endfor %}
                  </div>
                  <a href="{{ product.url }}" class="product-link">View Product</a>
                </div>
              </div>
            {% endfor %}
          {% endpaginate %}
        </div>
        
        <div id="no-products" class="no-products" style="display: none;">
          <div class="no-products-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"/>
              <path d="M8 12h8"/>
            </svg>
          </div>
          <h4>No Products Found</h4>
          <p>We couldn't find products matching your skin analysis. Check back later for new recommendations.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const input = document.getElementById('picture');
    const preview = document.getElementById('preview-image');
    const previewPlaceholder = document.getElementById('preview-placeholder');
    const analyzeBtn = document.getElementById('analyze-btn');
    const consentCheckbox = document.getElementById('consent');
    const resultsSection = document.getElementById('results-section');
    const analysisImages = document.getElementById('analysis-images');
    const yoloImage = document.getElementById('yolo-annotated-image');
    const segmentationImage = document.getElementById('segmentation-overlay-image');
    const productRecommendations = document.getElementById('product-recommendations');
    const activeFiltersDiv = document.getElementById('active-filters');
    const productItems = document.querySelectorAll('.product-item');
    const noProductsDiv = document.getElementById('no-products');
    const loadingSection = document.getElementById('loading-section');
    
    const webcamBtn = document.getElementById('webcam-btn');
    const captureBtn = document.getElementById('capture-btn');
    const stopCameraBtn = document.getElementById('stop-camera-btn');
    const webcamSection = document.getElementById('webcam-section');
    const webcamVideo = document.getElementById('webcam-video');
    const webcamCanvas = document.getElementById('webcam-canvas');
    const tipsSection = document.getElementById('tips-section');
    const tipsContent = document.getElementById('tips-content');
    let webcamStream = null;
    let uploadedFile = null;

    function updateAnalyzeButton() {
      const hasFile = uploadedFile !== null;
      const hasConsent = consentCheckbox.checked;
      analyzeBtn.disabled = !(hasFile && hasConsent);
    }

    consentCheckbox.addEventListener('change', function() {
      updateAnalyzeButton();
    });

    input.addEventListener('change', function () {
      const file = this.files[0];
      if (file) {
        preview.src = URL.createObjectURL(file);
        preview.style.display = 'block';
        previewPlaceholder.style.display = 'none';
        uploadedFile = file;
        updateAnalyzeButton();
        hideResults();
        hideWebcam();
      }
    });

    webcamBtn.addEventListener('click', function() {
      startWebcam();
    });

    captureBtn.addEventListener('click', function() {
      capturePhoto();
    });

    stopCameraBtn.addEventListener('click', function() {
      hideWebcam();
    });

    function startWebcam() {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(function(stream) {
          webcamStream = stream;
          webcamVideo.srcObject = stream;
          webcamSection.style.display = 'block';
          captureBtn.style.display = 'inline-flex';
          stopCameraBtn.style.display = 'inline-flex';
          webcamBtn.style.display = 'none';
        })
        .catch(function(err) {
          console.error('Error accessing camera:', err);
        });
    }

    function capturePhoto() {
      const context = webcamCanvas.getContext('2d');
      context.drawImage(webcamVideo, 0, 0, 256, 256);
      
      webcamCanvas.toBlob(function(blob) {
        uploadedFile = new File([blob], 'webcam-photo.jpg', { type: 'image/jpeg' });
        preview.src = URL.createObjectURL(blob);
        preview.style.display = 'block';
        previewPlaceholder.style.display = 'none';
        updateAnalyzeButton();
        hideResults();
        hideWebcam();
      }, 'image/jpeg', 0.8);
    }

    function hideWebcam() {
      if (webcamStream) {
        webcamStream.getTracks().forEach(track => track.stop());
        webcamStream = null;
      }
      webcamSection.style.display = 'none';
      captureBtn.style.display = 'none';
      stopCameraBtn.style.display = 'none';
      webcamBtn.style.display = 'inline-flex';
    }

    function hideResults() {
      resultsSection.style.display = 'none';
      analysisImages.style.display = 'none';
      productRecommendations.style.display = 'none';
      tipsSection.style.display = 'none';
      loadingSection.style.display = 'none';
    }

    analyzeBtn.addEventListener('click', function () {
      if (!uploadedFile || !consentCheckbox.checked) {
        return;
      }

      const formData = new FormData();
      formData.append('photo', uploadedFile);

      hideResults();
      loadingSection.style.display = 'block';
      analyzeBtn.disabled = true;
      analyzeBtn.querySelector('.button-text').textContent = 'Analyzing...';
      
      const apiEndpoint = '{{ block.settings.api_endpoint | default: "https://beautyai.duckdns.org/upload/" }}';
      
      fetch(apiEndpoint, {
        method: 'POST',
        body: formData,
        credentials: 'include',
      })
      .then(response => {
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          return response.text().then(text => {
            throw new Error(`Server returned ${contentType || 'unknown content type'} instead of JSON`);
          });
        }
        return response.json();
      })
      .then(data => {
        loadingSection.style.display = 'none';
        updateAnalyzeButton();
        analyzeBtn.querySelector('.button-text').textContent = 'Analyze Face';
        
        if (data.error) {
          console.error('API Error:', data.error);
        } else {
          displayResults(data);
        }
      })
      .catch(err => {
        loadingSection.style.display = 'none';
        updateAnalyzeButton();
        analyzeBtn.querySelector('.button-text').textContent = 'Analyze Face';
        console.error('Analysis failed:', err);
      });
    });

    function displayResults(data) {
      const issuesContainer = document.getElementById('detected-issues');
      issuesContainer.innerHTML = '';
      
      // Show analyzed face
      if (data.cropped_face) {
        document.getElementById('analyzed-face').src = data.cropped_face;
      }

      // Display skin type
      if (data.skin_type) {
        document.getElementById('skin-type-value').textContent = data.skin_type;
        
        // Display probabilities
        if (data.type_probs && data.type_probs.length === 3) {
          const probContainer = document.getElementById('skin-probabilities');
          const types = ['Dry', 'Normal', 'Oily'];
          probContainer.innerHTML = types.map((type, index) => `
            <div class="probability-bar">
              <div class="prob-label">
                <span>${type}</span>
                <span>${(data.type_probs[index] * 100).toFixed(1)}%</span>
              </div>
              <div class="prob-track">
                <div class="prob-fill" style="width: ${data.type_probs[index] * 100}%"></div>
              </div>
            </div>
          `).join('');
        }
      }

      // Display eye colors
      if (data.left_eye_color) {
        document.getElementById('left-eye-color').textContent = data.left_eye_color;
      }
      if (data.right_eye_color) {
        document.getElementById('right-eye-color').textContent = data.right_eye_color;
      }

      // Display acne information
      if (data.acne_pred && data.acne_confidence) {
        document.getElementById('acne-level').textContent = data.acne_pred;
        const confidence = data.acne_confidence * 100;
        document.getElementById('acne-confidence').textContent = `${confidence.toFixed(1)}%`;
        document.getElementById('acne-confidence-fill').style.width = `${confidence}%`;
      }

      const allDetectedIssues = {};

      // Process YOLO detection results
      if (data.yolo_boxes && data.yolo_boxes.length > 0) {
        data.yolo_boxes.forEach(box => {
          const issueType = box.label || box.class || 'Unknown';
          if (allDetectedIssues[issueType]) {
            allDetectedIssues[issueType].count++;
            allDetectedIssues[issueType].maxConfidence = Math.max(allDetectedIssues[issueType].maxConfidence, box.confidence || 0);
          } else {
            allDetectedIssues[issueType] = {
              count: 1,
              maxConfidence: box.confidence || 0
            };
          }
        });
      }

      if (data.segmentation_results) {
        let segmentationIssues = [];
        
        if (Array.isArray(data.segmentation_results)) {
          segmentationIssues = data.segmentation_results
            .map(result => {
              if (typeof result === 'string') {
                return result;
              } else if (result && typeof result === 'object') {
                return result.class || result.label || result.name || '';
              }
              return '';
            })
            .filter(issue => issue.length > 0);
        } else if (typeof data.segmentation_results === 'object') {
          // Handle object format where keys are condition names and values are boolean/confidence
          segmentationIssues = Object.entries(data.segmentation_results)
            .filter(([key, value]) => Boolean(value))
            .map(([key, value]) => key);
        }

        segmentationIssues.forEach(issue => {
          if (allDetectedIssues[issue]) {
            allDetectedIssues[issue].count++;
          } else {
            allDetectedIssues[issue] = {
              count: 1,
              maxConfidence: 0.8 // Default confidence for segmentation results
            };
          }
        });
      }

      if (Object.keys(allDetectedIssues).length > 0) {
        issuesContainer.innerHTML = Object.entries(allDetectedIssues).map(([issue, data]) => `
          <div class="issue-item">
            <div class="issue-info">
              <span class="issue-name">${issue}</span>
              <span class="issue-count">${data.count} area${data.count > 1 ? 's' : ''}</span>
            </div>
            <div class="issue-confidence">
              <div class="confidence-bar">
                <div class="confidence-fill" style="width: ${data.maxConfidence * 100}%"></div>
              </div>
              <span class="confidence-text">${(data.maxConfidence * 100).toFixed(1)}%</span>
            </div>
          </div>
        `).join('');
      } else {
        issuesContainer.innerHTML = `
          <div class="no-issues-message">
            <div class="no-issues-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M9 12l2 2 4-4"/>
                <path d="M21 12c.552 0 1-.448 1-1V5c0-.552-.448-1-1-1H3c-.552 0-1 .448-1 1v6c0 .552.448 1 1 1"/>
              </svg>
            </div>
            <span class="no-issues-text">No skin issues detected</span>
          </div>
        `;
      }

      // Display analysis images
      if (data.yolo_annotated) {
        yoloImage.src = data.yolo_annotated;
        yoloImage.style.display = 'block';
      }

      if (data.segmentation_overlay) {
        segmentationImage.src = data.segmentation_overlay;
        segmentationImage.style.display = 'block';
      }

      if (data.yolo_annotated || data.segmentation_overlay) {
        analysisImages.style.display = 'block';
      }

      // Display tips
      if (data.tips && data.tips.length > 0) {
        displayTips(data.tips);
      }

      // Show results section
      resultsSection.style.display = 'block';
      
      // Show product recommendations
      showProductRecommendations(data);
    }

    function showProductRecommendations(analysisData) {
      const filters = [];
      
      // Add skin type filter
      if (analysisData.skin_type) {
        filters.push(analysisData.skin_type.toLowerCase());
      }
      
      // Add detected issue filters from YOLO
      if (analysisData.yolo_boxes && analysisData.yolo_boxes.length > 0) {
        const detectedIssues = [...new Set(analysisData.yolo_boxes.map(box => 
          (box.label || box.class || '').toLowerCase()
        ))];
        filters.push(...detectedIssues);
      }
      
      if (analysisData.segmentation_results && Array.isArray(analysisData.segmentation_results)) {
        const segmentationIssues = analysisData.segmentation_results
          .map(result => {
            if (typeof result === 'string') {
              return result.toLowerCase();
            } else if (result && typeof result === 'object') {
              return (result.class || result.label || result.name || '').toString().toLowerCase();
            }
            return '';
          })
          .filter(issue => issue.length > 0);
        filters.push(...segmentationIssues);
      }
      
      if (analysisData.skin_conditions && Array.isArray(analysisData.skin_conditions)) {
        const conditions = analysisData.skin_conditions
          .map(condition => {
            if (typeof condition === 'string') {
              return condition.toLowerCase();
            } else if (condition && typeof condition === 'object') {
              return (condition.class || condition.label || condition.name || '').toString().toLowerCase();
            }
            return '';
          })
          .filter(condition => condition.length > 0);
        filters.push(...conditions);
      }
      
      if (analysisData.segmentation_classes && Array.isArray(analysisData.segmentation_classes)) {
        const segClasses = analysisData.segmentation_classes
          .map(cls => {
            if (typeof cls === 'string') {
              return cls.toLowerCase();
            } else if (cls && typeof cls === 'object') {
              return (cls.class || cls.label || cls.name || '').toString().toLowerCase();
            }
            return '';
          })
          .filter(cls => cls.length > 0);
        filters.push(...segClasses);
      }
      
      // Add acne filter if detected
      if (analysisData.acne_pred && parseInt(analysisData.acne_pred) > 0) {
        filters.push('acne');
      }
      
      const uniqueFilters = [...new Set(filters)];
      
      // Display active filters
      activeFiltersDiv.innerHTML = uniqueFilters.map(filter => 
        `<span class="filter-tag">${filter}</span>`
      ).join('');
      
      // Filter and show relevant products
      let visibleCount = 0;
      productItems.forEach(item => {
        const productTags = item.dataset.tags.toLowerCase();
        const productTitle = item.dataset.title.toLowerCase();
        const isRelevant = uniqueFilters.some(filter => 
          productTags.includes(filter) || productTitle.includes(filter)
        );
        
        if (isRelevant) {
          item.style.display = 'block';
          visibleCount++;
        } else {
          item.style.display = 'none';
        }
      });
      
      // Show no products message if no matches found
      if (visibleCount === 0) {
        noProductsDiv.style.display = 'block';
      } else {
        noProductsDiv.style.display = 'none';
      }
      
      // Show the recommendations section
      productRecommendations.style.display = 'block';
    }

    function displayTips(tips) {
      if (tips && tips.length > 0) {
        tipsContent.innerHTML = tips.map(tip => 
          `<div class="tip-item">
            <div class="tip-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="5"/>
                <line x1="12" x2="12" y1="1" y2="3"/>
                <line x1="12" x2="12" y1="21" y2="23"/>
                <line x1="4.22" x2="5.64" y1="4.22" y2="5.64"/>
                <line x1="18.36" x2="19.78" y1="18.36" y2="19.78"/>
                <line x1="1" x2="3" y1="12" y2="12"/>
                <line x1="21" x2="23" y1="12" y2="12"/>
                <line x1="4.22" x2="5.64" y1="19.78" y2="18.36"/>
                <line x1="18.36" x2="19.78" y1="5.64" y2="4.22"/>
              </svg>
            </div>
            <div class="tip-text">${tip}</div>
          </div>`
        ).join('');
        
        tipsSection.style.display = 'block';
      } else {
        tipsSection.style.display = 'none';
      }
    }
  });
</script>

{% schema %}
{
  "name": "Face Analysis Block",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Block Title",
      "default": "Face Analysis Extension"
    },
    {
      "type": "text",
      "id": "description",
      "label": "Description",
      "default": "Upload an image to analyze facial features and expressions."
    },
    {
      "type": "text",
      "id": "api_endpoint",
      "label": "API Endpoint URL",
      "default": "https://beautyai.duckdns.org/upload/",
      "info": "Full URL to your Django API endpoint (e.g., https://beautyai.duckdns.org/upload/ or https://yourdomain.com/upload/)"
    }
  ]
}
{% endschema %}
